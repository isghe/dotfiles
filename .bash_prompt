# Minimal bash prompt with git smarts.

local_username='mashbridge'

# Symbols
prompt_symbol="❯"

function prompt_command() {
  # Local or SSH session?
  local remote=
  [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] && remote=1

  # Git branch name and work tree status (only when we are inside working tree)
  local git_prompt=
  if [[ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
    # Branch name
    local branch="$(git symbolic-ref HEAD 2>/dev/null)"
    branch="${branch##refs/heads/}"

    # Color branch name green if clean, red otherwise
    local dirty=
    # Modified files
    git diff --no-ext-diff --quiet --exit-code --ignore-submodules 2>/dev/null || dirty=1
    # Untracked files
    [ -z "$dirty" ] && test -n "$(git status --porcelain)" && dirty=1

    if [ -n "$dirty" ]; then
      git_prompt=" \[\$RED\]$branch\[\$NOCOLOR\]"
    else
      git_prompt=" \[\$GREEN\]$branch\[\$NOCOLOR\]"
    fi
  fi

  # Only show username if not default
  local user_prompt=
  [ "$USER" != "$local_username" ] && user_prompt="$user_color$USER$NOCOLOR"

  # Show hostname if not working locally
  local host_prompt=
  [ -n "$remote" ] && host_prompt="@\[$YELLOW\]$HOSTNAME\[$NOCOLOR\]"

  # Show delimiter if user or host visible
  local login_delimiter=
  [ -n "$user_prompt" ] || [ -n "$host_prompt" ] && login_delimiter=":"

  # Red prompt if last command returned false, green otherwise.
  status_prompt="\`if [ \$? = 0 ]; then echo \[\$GREEN\]; else echo \[\$RED\]; fi\`\$prompt_symbol\[\$NOCOLOR\]"
  PS1="$user_prompt$host_prompt$login_delimiter\[\$YELLOW\]\w\[\$NOCOLOR\]$git_prompt $status_prompt "

  # Terminal title
  local title="$(basename $PWD)"
  [ -n "$remote" ] && title="$title \xE2\x80\x94 $HOSTNAME"
  echo -ne "\033]0;$title"; echo -ne "\007"
}

command -v git >/dev/null 2>&1 && PROMPT_COMMAND=prompt_command
